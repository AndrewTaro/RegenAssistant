(def constant RA_ELEMENT_NAME "'regenAssistant'")
(def constant RA_ANIM_LIMIT_NAME "'regenAssistant_LimitRegenWarning'")
(def constant RA_ANIM_LIMIT_DESC "'I am a good player and certainly able to manage the heal.

Limit the warning duration of unused heals to only once'")

(def element RegenAssistantUb2 () layout=true
	(scope
		(macro STAGE_SIZE)

		#entities
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		#(var currentVehicleId:number = "camera.observedShipId" (event "camera.evObservedShipChanged"))
		#(var vehicleEntity:gfx = "$datahub.getPrimaryEntity(CC.vehicleInfo, currentVehicleId)")
		(var vehicleEntity:gfx = "$datahub.getSingleEntity(CC.selfVehicle)")
		(var regenEntity:gfx = "$datahub.getPrimaryEntity(CC.battleConsumable, '9_-1')")
		(var workTimeEntity:gfx = "$datahub.getPrimaryEntity(CC.parameter, toString(regenEntity.id) + '_' + 'workTime')")
		(var regenSpeedEntity:gfx = "$datahub.getPrimaryEntity(CC.parameter, toString(regenEntity.id) + '_' + 'regenerationHPSpeed')")
		(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
		(var userPrefsBool:dict = "userPrefsComponent.userPrefs.elementsGroupExpand" (event "userPrefsComponent.evUserPrefsChanged"))

		#calculations
		(var currentHealth:number = "vehicleEntity.health.value" (event "vehicleEntity.health.evValueChanged"))
		(var afterRegenHealth:number = "vehicleEntity.regeneration.maxValue" (event "vehicleEntity.regeneration.evChanged"))
		(var regenWorkTime:number = "workTimeEntity.parameter.currentValue" (event "workTimeEntity.parameter.evChanged"))
		(var regenSpeed:number = "regenSpeedEntity.parameter.currentValue" (event "regenSpeedEntity.parameter.evChanged"))
		(var regenMaxValue:number = "round(regenSpeed * regenWorkTime)")
		(var regenValue:number = "afterRegenHealth - currentHealth")
		
		#booleans
		(var isRegenMaxEffeciency:number = "regenValue > regenMaxValue * 0.97")
		(var isRegenValueValid:bool = "regenValue >= 0")
		(var isRegenReady:bool = "regenEntity.battleConsumable.state == SC.Battle.CONSUMABLE_STATES.READY" (event "regenEntity.battleConsumable.evStateChanged"))
		(var isLocked:bool = "regenEntity.battleConsumable.isLocked" (event "regenEntity.battleConsumable.evIsLockedChanged"))
		(var isAlive:number = "vehicleEntity.health.isAlive" (event "vehicleEntity.health.evIsAliveChanged"))
		(var shouldUseRegen:bool = "isAlive && isRegenMaxEffeciency && isRegenReady && !isLocked")

		#effect animation
		(event evAnimLimitChanged)
		(event evPlayWarningAnim)
		(event evStopWarningAnim)
		(dispatch evPlayWarningAnim (bind trigger "shouldUseRegen") (bind enabled "!shouldUseRegen"))
		(dispatch evStopWarningAnim (bind trigger "shouldUseRegen") (bind enabled "shouldUseRegen"))
		(var isRegenAnimLimited:bool = "RA_ANIM_LIMIT_NAME in userPrefsBool ? userPrefsBool[RA_ANIM_LIMIT_NAME] : false")
		(var effectRadius:number = "0" watch=false)
		(var isEffectVisible:bool = "false" watch=false)
		(bind isEffectVisible "true" init=false (event "evPlayWarningAnim"))
		(bind isEffectVisible "false" init=false (event "evStopWarningAnim"))
		(controller $Animation
			(bindcall play  id='regen_assistant_anim'
							duration=0.5
							repeatCount="isRegenAnimLimited ? 1 : -1"
							easing="Easing.quint_out"
							from=	"{ effectRadius: 0 }"
							to	=	"{ effectRadius: 100 }"
							(event "evPlayWarningAnim")
			)
			(bindcall stop	id='regen_assistant_anim' (event "evStopWarningAnim"))
			(dispatch evStopWarningAnim on=evAnimEnded)
		)

		#styles
		(var isModVisible:bool = "isAlive && regenEntity && isRegenValueValid")
		(var regenValueTextColor:number = "isRegenMaxEffeciency ? SC.Ui_styles.SERVICE_COLORS.ORANGE : SC.Ui_styles.SERVICE_COLORS.GREEN")
		(macro DRAGGABLE_GET_DROP_POSITION _wndName = "RA_ELEMENT_NAME" _defaults = "{positionX: 320, positionY: (stageHeight - 290)}")
	)
	(block
		#draggable
		(element ModDraggableElement _wndName="RA_ELEMENT_NAME" _defaults = "{positionX: 320, positionY: (stageHeight - 290)}")
		#style
		(bind visible "isModVisible")
		(style
			(position = "absolute")
			(bind left "drogPosX")
			(bind top "drogPosY")
			#(bind scaleX "scale")
			#(bind scaleY "scale")
		)
		(hblock	
			(style
				(hitTest = false)
				(height = 44)
				(width = 95)
				(marginBottom = "2px")
				(marginLeft = "2px")
				(marginTop = "2px")
			)
			#effect
			(block
				(bind visible "isEffectVisible")
				(style
					(position = "absolute")
					(left = 50%)
					(top = 50%)
				)
				(controller $Sector
					(bind arc "360")
					(bind radius "effectRadius")
					(bind innerRadius "effectRadius")
					(bind lineThickness "3")
					(bind lineAlpha "1")
					(bind lineColor "0xFFFFFF")
				)
			)
			#image
			(block
				(style
					(marginTop = 1px)
					(width = 60)
					(height = 60)
					(scaleX = "0.66")
					(scaleY = "0.66")
					(backgroundImage = "'url:../consumables/consumable_PCY010_RegenCrewPremium.png'")
				)
			)
			#text
			(block
				(element RegenAssistantTextItem "regenValue" "regenValueTextColor")
				(element RegenAssistantTextItem "regenMaxValue")
				#(macro trace "effectRadius")
			)
		)
		(block
			(style
				(position = absolute)
				(right = 0)
			)
			(element RegenAssistantOptionButton)
		)
	)
)

(def element RegenAssistantTextItem(_text:str, _color:number="SC.Ui_styles.SERVICE_COLORS.GREEN") layout=true
	(tf
		(class $TextDefaultBoldNM)
		(style
			(width = 50px)
			(bind textColor "_color")
			(textAlign = "right")
			(marginTop = 5px)
			(marginBottom = 5px)
		)
		(bind text "_text")
	)
)

(def element RegenAssistntAnimCheckBox () layout=true
	(scope
		(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
		(var userPrefsBool:dict = "userPrefsComponent.userPrefs.elementsGroupExpand" (event "userPrefsComponent.evUserPrefsChanged"))
		(var isRegenAnimLimited:bool = "RA_ANIM_LIMIT_NAME in userPrefsBool ? userPrefsBool[RA_ANIM_LIMIT_NAME] : false")
		(macro MOUSE_HANDLER_SCOPE)
	)
	(macro SOUND_HANDLER "'default_checkbox'")

	(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': !isRegenAnimLimited, 'name': 'elementsGroupExpand', 'subName': RA_ANIM_LIMIT_NAME}]" init=false watch=false (event "evMouseDown"))

	(block
		(style (flow = "horizontal") (width = "150px") (align = "middle"))

		(mc contrast_panel
			(class $FullsizeAbsolute)
			(style
				(alpha = "0.8")
				(hitTest = false)
			)
		)

		(element CheckBoxNoLabel
				_selected="isRegenAnimLimited"
				_enabled="true"
				_rollOver="rollOver"
				_interactive="true"
			(style
				(margin = [3,2,2,2])
			)
		)

		(tf
			(class $TextDefaultNM)
			(bind alpha "rollOver && !(mouseDown) ? TA : TC")
			(style
				(width = "100%")
				(margin = [2,10,2,10])
			)
			(text = "RA_ANIM_LIMIT_DESC")
		)

		(macro MOUSE_HANDLER "true")
	)
)

(def element RegenAssistantOptionButton () layout=true
	(scope
		(event evHideInfotip)
		(event evOnButtonClicked)

		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(var infotipVisible:bool = false)
	)
	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive"))

	(controller $Tooltip
		(renderer='RegenAssistntAnimCheckBox')
		(bindcall show animation={duration:0.1, easing:"Easing.cubic_in", from:{alpha:1}, to:{alpha:1}} (event "evOnButtonClicked"))
		(bindcall hide animation={duration:0.1, easing:"Easing.cubic_out", from:{alpha:1}, to:{alpha:0}} on='evClickOutside' (event "evHideInfotip"))
		(bind infotipVisible "true" init=false on='evShow')
		(bind infotipVisible "false" init=false on='evHide')
		(priority=1)
		(macro MINIMAP_TOOLTIP_COMMON_PARAMS)
	)

	
	(element ButtonSettingsSmall
		(bind visible "isMouseActive")
		(style
			(position = "absolute")
			(alpha = "0.8")
			(left = "3px")
			(top = "3px")
		)
	)
)